Slash = require 'slash'
protocol = require '../../lib/protocol'

hex = (n) ->
	(+n).toString(16).toUpperCase()

pad = (n, l, c = '0') ->
	n = n.toString()
	i = l - n.length
	n = c + n while i-- > 0
	n

module.exports = class Logger
	constructor: (dispatch) ->
		slash = new Slash dispatch

		codes = {}
		start = Date.now()
		showknown = 2
		whitelist = false

		slash.on 'log', (args) ->
			args = args.split ' '
			switch args.shift().toLowerCase()
				when 'type'
					mode1 = if whitelist then 'white' else 'black'
					mode2 = switch showknown
						when '0' then 'unknown'
						when '1' then 'known'
						else 'all'
					slash.print "Logging is in #{mode1}list mode showing #{mode2} messages."
				when 'toggle'
					whitelist = !whitelist
					slash.print "Switched to #{if whitelist then 'white' else 'black'}list mode."
				when 'show'
					switch args.shift().toLowerCase()
						when 'unknown'
							slash.print "Now showing unknown messages."
							showknown = 0
						when 'known'
							slash.print "Now showing known messages."
							showknown = 1
						else
							slash.print "Now showing all messages."
							showknown = 2
				when 'add'
					code = parseInt args.shift(), 16
					codes[code] = 1
					slash.print "Added #{pad hex(code), 4}."
				when 'del', 'rem'
					code = parseInt args.shift(), 16
					delete codes[code]
					slash.print "Removed #{pad hex(code), 4}."
				when 'list'
					list = Object.keys codes
					list = list.map (c) -> pad hex(c), 4
					list.sort()
					slash.print "Logged codes: #{list.join ' '}"

		dispatch.hook '*', (code, data, fromServer) ->
			known = false
			name = protocol.map.code[code]
			if name?
				known = protocol.messages[name]?

			return if showknown isnt 2 and +known isnt showknown
			return if codes[code]? isnt whitelist

			# column 1
			if known
				str = '* '
			else
				str = '  '

			str += pad Date.now() - start, 9, ' '

			# column 2
			if fromServer
				str += ' | <- '
			else
				str += ' | -> '

			#str += pad hex(code), 4
			str += protocol.map.code[code] ? pad hex(code), 4

			# column 3
			str += ' |'
			str += ' ' + pad hex(c), 2 for c in data

			# log
			console.log str
			return
