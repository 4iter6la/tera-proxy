// Generated by CoffeeScript 1.7.1
var leftRotate, sha1;

leftRotate = function(x, n) {
  return (x << n) | (x >>> (32 - n));
};

module.exports = sha1 = (function() {
  function sha1() {
    this.digest = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];
    this.block = new Buffer(64);
    this.blockIndex = 0;
    this.lengthHigh = 0;
    this.lengthLow = 0;
    this.computed = false;
  }

  sha1.prototype.update = function(buffer) {
    var c, _i, _len;
    for (_i = 0, _len = buffer.length; _i < _len; _i++) {
      c = buffer[_i];
      this.block[this.blockIndex++] = c;
      this.lengthLow += 8;
      this.lengthLow &= 0xFFFFFFFF;
      if (this.lengthLow === 0) {
        this.lengthHigh++;
        this.lengthHigh &= 0xFFFFFFFF;
      }
      if (this.blockIndex === 64) {
        this.processMessageBlock();
      }
    }
  };

  sha1.prototype.processMessageBlock = function() {
    var a, b, c, d, e, t, temp, w, _i, _j, _k, _ref;
    w = Array(80);
    for (t = _i = 0; _i < 16; t = ++_i) {
      w[t] = this.block[t * 4] << 24;
      w[t] |= this.block[t * 4 + 1] << 16;
      w[t] |= this.block[t * 4 + 2] << 8;
      w[t] |= this.block[t * 4 + 3];
    }
    for (t = _j = 16; _j < 80; t = ++_j) {
      w[t] = w[t - 3] ^ w[t - 8] ^ w[t - 14] ^ w[t - 16];
    }
    _ref = this.digest, a = _ref[0], b = _ref[1], c = _ref[2], d = _ref[3], e = _ref[4];
    for (t = _k = 0; _k < 80; t = ++_k) {
      temp = leftRotate(a, 5) + e + w[t];
      if (t < 20) {
        temp += (b & c) | ((~b) & d);
        temp += 0x5A827999;
      } else if (t < 40) {
        temp += b ^ c ^ d;
        temp += 0x6ED9EBA1;
      } else if (t < 60) {
        temp += (b & c) | (b & d) | (c & d);
        temp += 0x8F1BBCDC;
      } else {
        temp += b ^ c ^ d;
        temp += 0xCA62C1D6;
      }
      e = d;
      d = c;
      c = leftRotate(b, 30);
      b = a;
      a = temp & 0xFFFFFFFF;
    }
    this.digest[0] += a >>> 0;
    this.digest[1] += b >>> 0;
    this.digest[2] += c >>> 0;
    this.digest[3] += d >>> 0;
    this.digest[4] += e >>> 0;
    this.blockIndex = 0;
  };

  sha1.prototype.padMessage = function() {
    this.block[this.blockIndex++] = 0x80;
    if (this.blockIndex > 56) {
      while (this.blockIndex < 64) {
        this.block[this.blockIndex++] = 0;
      }
      this.processMessageBlock();
    }
    while (this.blockIndex < 56) {
      this.block[this.blockIndex++] = 0;
    }
    this.block[56] = this.lengthHigh >> 24;
    this.block[57] = this.lengthHigh >> 16;
    this.block[58] = this.lengthHigh >> 8;
    this.block[59] = this.lengthHigh;
    this.block[60] = this.lengthLow >> 24;
    this.block[61] = this.lengthLow >> 16;
    this.block[62] = this.lengthLow >> 8;
    this.block[63] = this.lengthLow;
    this.processMessageBlock();
  };

  sha1.prototype.hash = function() {
    var out, t, _i;
    if (!this.computed) {
      this.padMessage();
      this.computed = true;
    }
    out = new Buffer(20);
    for (t = _i = 0; _i < 5; t = ++_i) {
      out[t * 4] = this.digest[t];
      out[t * 4 + 1] = this.digest[t] >> 8;
      out[t * 4 + 2] = this.digest[t] >> 16;
      out[t * 4 + 3] = this.digest[t] >> 24;
    }
    return out;
  };

  return sha1;

})();
