// Generated by CoffeeScript 1.7.1
var Readable, Writable;

module.exports = {
  readable: Readable = (function() {
    function Readable(buffer, position) {
      this.buffer = buffer;
      this.position = position != null ? position : 0;
    }

    Readable.prototype.seek = function(n) {
      return this.position = n;
    };

    Readable.prototype.skip = function(n) {
      return this.position += n;
    };

    Readable.prototype.byte = function() {
      return this.buffer[this.position++];
    };

    Readable.prototype.bytes = function(n) {
      return this.buffer.slice(this.position, this.position += n);
    };

    Readable.prototype.uint16 = function() {
      var ret;
      ret = this.buffer.readUInt16LE(this.position);
      this.position += 2;
      return ret;
    };

    Readable.prototype.uint32 = function() {
      var ret;
      ret = this.buffer.readUInt32LE(this.position);
      this.position += 4;
      return ret;
    };

    Readable.prototype.uint64 = function() {
      var high, low;
      low = this.uint32();
      high = this.uint32();
      return {
        low: low,
        high: high
      };
    };

    Readable.prototype.int16 = function() {
      var ret;
      ret = this.buffer.readInt16LE(this.position);
      this.position += 2;
      return ret;
    };

    Readable.prototype.int32 = function() {
      var ret;
      ret = this.buffer.readInt32LE(this.position);
      this.position += 4;
      return ret;
    };

    Readable.prototype.int64 = function() {
      var high, low;
      low = this.uint32();
      high = this.int32();
      return {
        low: low,
        high: high
      };
    };

    Readable.prototype.float = function() {
      var ret;
      ret = this.buffer.readFloatLE(this.position);
      this.position += 4;
      return ret;
    };

    Readable.prototype.string = function() {
      var c, ret;
      ret = '';
      while (c = this.uint16()) {
        ret += String.fromCharCode(c);
      }
      return ret;
    };

    return Readable;

  })(),
  writable: Writable = (function() {
    function Writable(length) {
      this.length = length;
      this.buffer = new Buffer(length);
      this.position = 0;
    }

    Writable.prototype.seek = function(n) {
      return this.position = n;
    };

    Writable.prototype.skip = function(n) {
      return this.position += n;
    };

    Writable.prototype.byte = function(n) {
      return this.buffer[this.position++] = n;
    };

    Writable.prototype.bytes = function(buf) {
      buf.copy(this.buffer, this.position);
      return this.position += buf.length;
    };

    Writable.prototype.uint16 = function(n) {
      this.buffer.writeUInt16LE(n, this.position);
      return this.position += 2;
    };

    Writable.prototype.uint32 = function(n) {
      this.buffer.writeUInt32LE(n, this.position);
      return this.position += 4;
    };

    Writable.prototype.uint64 = function(obj) {
      this.uint32(obj.low);
      return this.uint32(obj.high);
    };

    Writable.prototype.int16 = function(n) {
      this.buffer.writeInt16LE(n, this.position);
      return this.position += 2;
    };

    Writable.prototype.int32 = function(n) {
      this.buffer.writeInt32LE(n, this.position);
      return this.position += 4;
    };

    Writable.prototype.int64 = function(obj) {
      this.uint32(obj.low);
      return this.int32(obj.high);
    };

    Writable.prototype.float = function(n) {
      this.buffer.writeFloatLE(n, this.position);
      return this.position += 4;
    };

    Writable.prototype.string = function(str) {
      var i, _i, _ref, _results;
      str += '\0';
      _results = [];
      for (i = _i = 0, _ref = str.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.uint16(str.charCodeAt(i)));
      }
      return _results;
    };

    return Writable;

  })()
};
